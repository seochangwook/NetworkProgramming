#include<stdio.h>
#include<stdlib.h>
#include<string.h>
#include<dirent.h> //DIR 포인터 변수랑 연동되는 구조체 헤더파일.//
#include<sys/types.h> //여러 타입을 정의.//
#include<fcntl.h> //파일디스크립터를 제어.//
#include<unistd.h> //여려가지 설정관련한 시스템 콜이 포함.//
#include<sys/stat.h> //파일, 디렉터리의 정보를 포함하는 시스템 콜이 포함.//
#include<time.h> //시간에 따른 시스템 콜.//
#include<signal.h> //시그널 관련 시스템 콜.//
#include<pthread.h> //스레드 관련 시스템 콜. -lpthread 링커옵션 필요.//
#include<errno.h> //에러처리에 관한 시스템 콜.//
#include<pwd.h> // /etc/passwd관련한 시스템 콜이 들어있는 헤더파일.//
#include<grp.h> // /etc/group관련 시스템 콜이 들어있는 헤더파일.//
#include<math.h> //수학연산 라이브러리 헤더파일 -lm을 가지고 컴파일 필요.//
#include<sys/time.h> //시간관련 시스템 콜 관련 라이브러리.//
#include<sys/wait.h>
#include<netinet/in.h>
#include<sys/socket.h> //소켓관련 라이브러리 함수.//
#include<netdb.h> //포트,서비스 정보관련 라이브러리 함수.//
#include<arpa/inet.h> //IP주소에 대해서 변환함수를 가지고 있는 라이브러리.//
#include<netinet/ip.h> //RAW소켓 사용 시 ip의 헤더정보를 위한 라이브러리.//
#include<netinet/tcp.h> //RAW소켓 사용 시 tcp의 헤더정보를 위한 라이브러리.//
#include<netinet/ip_icmp.h> //RAW소켓 사용 시 ICMP의 헤더정보를 위한 라이브러리.//
#include<netinet/in_systm.h>
#include<sys/resource.h> //getrlimit시스템 콜 사용.//
#include<sys/ioctl.h>
#include<net/if.h>

typedef struct //하나의 노드를 만든다.//
{
	int key; //키.//
	int req_count; //참조회수.//
	char address[255]; //도메인, IP정보 기록.//
}Node;

typedef struct
{
	Node heap[BUFSIZ]; //노드를 배열로 선언. 즉 여러 노드들이 있다.//
	int heap_size; //힙의 사이즈를 정의.//
}HeapType;
/////////////////////////////
//현 도메인 파일에 대한 사이즈 배열이다. 이것을 사용하는 이유는 도메인 파일에서 데이터를 불러올 때 사용된다.
//도메인 파일은 그 순서가 변경되지 않는다.즉 배열의 순서가 각각의 도메인 영역의 사이즈랑 일치한다.//
int size_array[BUFSIZ];
int array_size_count = 0;
/////////////////////////////
//로그파일은 전역변수로 선언하고, 서버에서 디버그를 위한 메시지를 나중에 파일로 입력하면 로그파일이 된다.//
struct tm *t; //시간관련 구조체.//
time_t timer; //시간측정 변수.//

FILE *log_file = NULL; //로그파일 포인터.//
//////////////////////////////
//도메인 참조테이블 파일에서 key값도 같이 저장이 되야 하기에 key값은 현 프로그램이 계속 수행이 되면서 자동으로 증가되야 하기 때문에
//전역변수로 선언.//
int key = 0; //초기 키값은 1부터 시작한다. 이는 데이터베이스에서 auto-increment랑 같다.//
////////////////////////////
//서버에서 필요한 서비스 관련 모듈.네트워크 부분과 서비스 부분을 독립화하여 프로그램의 구조를 간단히 한다.//
//최종적으로 전송되는 것은 send_buf이다. 따라서 이 send_buf[]는 Call by Reference로 작성되게 된다.//
int send_dns_data_to_dnsserver(int clnt_sock, char recv_buf[],char send_buf[]); //클라이언트가 질의한 DNS정보를 전송하는 서비스.DNS서버 이용//
void send_dns_data_to_table(int clnt_sock, char *domain_file, char *ref_file,int *ref_key, char recv_buf[], char send_buf[]); //클라이언트에가 질의한 DNS정보를 전송하는 서비스.도메인 참조테이블 이용.//
//이 외에도 나중에 헤시테이블 설정, 도메인 참조테이블 설정, 테이블 갱신 함수들이 필요.//
//데이터 처리관련 함수.//
int parsing_ip_domain(char recv_buf[]); //ip주소인지 도메인 주소인지 파싱하는 함수. 1이면 ip주소, 0이면 도메인주소.//
void domain_ref_table_file_save(char *domain_ref_table_file_name, char *send_buf, int key); //완성된 결과가 저장되어있는 버퍼를 보낸다.//
void ref_table_file_save(char *ref_table_file_name, int key, int req_count, char *recv_buf); //참조테이블을 설정하는 부분. 들어가는 인자는 key, req_count이다.//
int search_ref_table(char *ref_table_file_name,int *ref_key, char *recv_buf); //참조테이블에 현재 도메인, ip주소가 있는지 검사.//
void update_ref_table(char *ref_table_file_name, int *ref_key); //참조횟수를 갱신하는 함수.//
void update_ref_table_sorting(char *ref_table_file_name); //참조테이블 파일을 업데이트 하는 함수.//
//자료구조 힙 관련 함수.//
void file_data_get(HeapType *heap, char *ref_file_name); //파일로 부터 데이터를 읽어오는 함수.//
void init(HeapType *heap); //힙을 초기화 하는 함수.//
void heap_insert(HeapType *heap, Node item); //힙에다 데이터를 저장하는 함수.//
Node delete_heap(HeapType *heap); //힙에 데이터를 제거하는 과정. 힙은 데이터를 제거할때 정렬이 된다.//
void file_data_set(HeapType *heap, char *ref_file_name); //정렬된 데이터를 파일에 설정하는 과정.//
///////////////////////////
int main(int argc, char *argv[], char *envp[])
{
	//데이터 송수신관련 변수.//
	char send_buf[BUFSIZ];
	char recv_buf[BUFSIZ];
	int send_len;
	int recv_len;

	//소켓관련변수.//
	int clnt_sock;
	int serv_sock;
	struct sockaddr_in serv_addr, clnt_addr;

	socklen_t clnt_addr_size; //길이.//

	//서비스 관련 변수, 구조체 등 부분.//
	int table_exist_check_value; //도메인 테이블을 검사 시 이용되는 분기변수.1이면 테이블에 존재. 0이면 존재하지 않음//
	int check_search_value; //도메인 탐색이 실패했는지 성공했는지 판단하는 변수.//
	int req_count; //참조횟수. 이 값은 함수에 의해서 기존에 존재하는 도메인,IP일 경우 먼저 이 값을 설정하게 된다.//
	int ref_key; //올바른 도메인 시 관련 키값.//

	//소켓생성.//
	serv_sock = socket(PF_INET, SOCK_STREAM, 0);

	//파일관련 변수.//
	FILE *domain_ref_table_file_pointer = NULL; //도메인 참조테이블 파일을 참조하는 포인터 변수.//
	FILE *ref_table_file_pointer = NULL; //참조테이블 파일을 참조하는 포인터 변수.//

	//인수검사.//
	if(argc < 5)
	{
		fprintf(stderr, "Usage : %s <port> <domain file> <reference file> <log file>\n", argv[0]);
		exit(1);
	}

	else if(argc == 5)
	{
		printf("Log File Open Success ...\n");
	}

	if(serv_sock == -1)
	{
		fprintf(stderr, "socket() error\n");
		exit(1);
	}

	//주소설정.//
	memset(&serv_addr, 0, sizeof(serv_addr));
	serv_addr.sin_addr.s_addr = htonl(INADDR_ANY);
	serv_addr.sin_family = AF_INET;
	serv_addr.sin_port = htons(atoi(argv[1]));

	//포트와 주소설정을 결합.//
	if(bind(serv_sock, (struct sockaddr *)&serv_addr, sizeof(serv_addr)) == -1)
	{
		fprintf(stderr, "bind() error\n");
		exit(1);
	}

	//운영체제에게 개방을 요청.//
	if(listen(serv_sock, 5) == -1)
	{
		fprintf(stderr, "listen() error\n");
		exit(1);
	}

	//데이터 송수신.//
	//우선 클라이언트의 요청을 수용한다.//
	while(1)
	{
		if((log_file = fopen(argv[4], "a")) == NULL)
		{
			fprintf(stderr, "file open error\n");
			exit(1);
		}

		clnt_addr_size = sizeof(clnt_addr); //주소를 저장하기 위해서 사이즈를 할당.//

		clnt_sock = accept(serv_sock, (struct sockaddr *)&clnt_addr, &clnt_addr_size); //요청을 받는다.//

		//클라이언트로부터 데이터를 입력받는다.이 부분을 while로 해야지 서버는 계속 받을 수 있다.//
		while((recv_len=read(clnt_sock, recv_buf, sizeof(recv_buf))) != 0)
		{
			fputs("------------------------------------------", log_file);
			fputs("\n", log_file);
			fputs("Connection Success ...", log_file);
			fputs("\n", log_file);

			fprintf(log_file, "Client IP Address : %s\n", inet_ntoa(clnt_addr.sin_addr)); //접속한 클라이언트의 주소.//

			timer = time(NULL);
			t = localtime(&timer);

			fputs("Server Access time : ", log_file);
			fputs("\n", log_file);
			fprintf(log_file, "%d.%d.%d %d:%d:%d\n", t->tm_year+1900, t->tm_mon+1, t->tm_mday, t->tm_hour, t->tm_min, t->tm_sec);
			fputs("\n", log_file);

			memset(send_buf, 0, sizeof(char)*BUFSIZ);

			if(recv_len == -1)
			{
				fprintf(stderr, "read() error\n");
				exit(1);
			}

			recv_buf[recv_len] = '\0'; //마지막에 널을 넣어주어서 마지막을 인식.//

			fprintf(log_file,"Client query domain(IP) : %s", recv_buf);
			fputs("\n", log_file);

			//최초 테이블 검사가 이루어진다.//
			if(key == 0) //key가 1이 아니라는 것은 테이블에 등록된 도메인, IP주소가 최소 1개이상은 있다는 의미. 즉 한개도 없으면 테이블 비교가
				//필요없기에 분기한다.//
			{
				table_exist_check_value = 0;
			}

			else if(key >= 1) //0이라는 것은 최소 1개이상의 도메인 IP주소가 저장되었다는 의미로 테이블 검색을 요구하게 된다.//
			{
				//이 부분에서 도메인 테이블을 검사하여서 도메인 테이블에 존재 시 해당 서비스로 분기.1을 반환하면 테이블에 도메인이 존재.//
				table_exist_check_value = search_ref_table(argv[3],&ref_key,recv_buf); //참조테이블에 현재 검색할려는 도메인주소나 IP주소가 등록되어 있는지 검사.그리고 반환될 시 해당키값도 채워져서 반환이 된다.//
			}

			if(table_exist_check_value == 0) //존재하지 않을 경우.//
			{
				//참조테이블에 들어가는 것은 올바른 IP주소나 도메인이 입력되었을 경우이다.따라서 이 함수내에서 실행되게 된다.//
				//도메인, IP검색에 실패할 수 있으니 검색확인 변수가 필요.//
				check_search_value = send_dns_data_to_dnsserver(clnt_sock,recv_buf, send_buf);

				if(check_search_value == 0) //도메인, IP검색에 실패한 경우.//
				{
					//따로 저장할 필요가 없고, 사용자로 부터 다시 입력받는다.//
				}

				else if(check_search_value == 1) //도메인, IP검색에 성공한 경우.//
				{
					//이 부분에서는 저장을 한다.저장하는 모듈은 dns서버로부터 넘겨져 오는 정보를 설정하는 부분과 독립하여서
					//철저히 저장기능만 하게 된다. key는 전역변수이고, 도메인 탐색에 성공했을 시만 증가하게 된다.//
					//다 설정된 송신버퍼를 출력하기 위해서 설정.//
					
					req_count = 1; //이 부분에서 실행되는 도메인,IP는 처음으로 등록되는 것이므로 무조건 1부터 시작한다.//

					domain_ref_table_file_save(argv[2], send_buf, key);
					ref_table_file_save(argv[3], key, req_count, recv_buf);

					key++; //다음 새로운 도메인,IP를 위해서 key값을 준비한다.//
				}
			}

			else if(table_exist_check_value == 1) //도메인 참조테이블에 존재하는 경우.//
			{
				//이 경우는 도메인을 dns서버로 부터 가져오는 것이 아니기에 따로 검색실패여부의 반환타입이 필요없다.//
				send_dns_data_to_table(clnt_sock, argv[2], argv[3],&ref_key,recv_buf, send_buf);

				//이 부분에서는 참조테이블에서 참조횟수를 설정하는 함수가 필요.따로 저장할 필요는 없고 참조횟수만 갱신해주면 된다.//
				update_ref_table(argv[3], &ref_key); //따로 버퍼나 소켓기술자는 필요없다.// 

				//테이블의 참조횟수가 변경되었으니 테이블 갱신.//
				update_ref_table_sorting(argv[3]);
			}

			//설정된 최종 dns정보를 클라이언트로 전송하기전에 출력.//
			fprintf(log_file,"\n< Trans data Info >\n");
			fputs(send_buf, log_file);
			fputs("\n", log_file);
			//클라이언트로 전송.보낼때는 사이즈에 정확하게 전송.//
			send_len = write(clnt_sock, send_buf, strlen(send_buf));

			if(send_len == -1)
			{
				fprintf(stderr, "write() error\n");
				exit(1);
			}
	
			fprintf(log_file,"Client send Success ...\n");

			//전송을 완료했으므로 전송버퍼를 초기화. 다음 데이터를 받기 위해서이다.//
			memset(send_buf, 0, sizeof(char)*BUFSIZ);
			
			//참조테이블을 갱신한다.(힙 정렬을 이용해서 테이블를 유지한다.//

			fputs("------------------------------------------", log_file);
			fputs("\n", log_file);
		}
		
		fclose(log_file);
		close(clnt_sock); //하나의 연결을 닫고 다음 클라이언트의 접속을 대기받는다.//
	}

	close(serv_sock); //서버의 소켓을 종료.//

	return 0;
}
/////////////////////////////////////
int parsing_ip_domain(char *string)
{
	int check_value = 0; //기본 반환은 도메인이 된다.//
	int i;
	
	if(isalpha(string[0])) //첫글자가 알파벳인가? 알파벳이면 도메인명이다.//
	{
		check_value = 0;
	}

	else if(isdigit(string[0])) //첫글자가 10진수 숫자인가? 숫자이면 IP주소가 된다.//
	{
		check_value = 1;
	}

	return check_value;
}
/////////////////////////////////////
void update_ref_table(char *ref_table_file_name, int *ref_key)
{
	//파일 포인터./
	FILE *ref_file_pointer = NULL;

	//파일에서 형식인자로 저장하기 위한 임시배열 변수.//
	int temp_key[BUFSIZ]; 
	int temp_req_count[BUFSIZ];
	char *temp_domain[BUFSIZ]; // 문자열 저장을 위해 2차원 배열.//

	int array_count = 0;
	int i;

	//읽기권한으로 파일을 열어 우선 배열에 작업을 한다. 작업을 하면서 현재 ref_key값과 비교하면서 해당 key값은 
	//req_count를 하나 증가시키고 사용한다.//
	if((ref_file_pointer = fopen(ref_table_file_name, "r")) == NULL)
	{
		fprintf(stderr, "file open error\n");
		exit(1);
	}

	//파일을 전부 읽는다.//
	while(!feof(ref_file_pointer))
	{
		//여러 문자열을 저장해야하니 2차원 배열로 선언.//
		temp_domain[array_count] = (char *)malloc(strlen("Input")+1); //이차원 배열.동적할당.//

		//파일로 부터 데이터를 읽어온다.문자열은 필요없으므로 정수만 읽어온다.////
		fscanf(ref_file_pointer, "%d %d %s\n", &temp_key[array_count], &temp_req_count[array_count], temp_domain[array_count]);

		array_count++;
	}

	//현재 키값과 일치하는 것이 있으면 한번 더 참조된 것이니 request count값을 올려준다.//
	for(i=0; i<array_count; i++)
	{
		if(temp_key[i] == *ref_key)
		{
			temp_req_count[i] = temp_req_count[i]+1; //참조 카운터 증가.//

			break;
		}
	}

	//우선 파일을 닫고 다시 쓰기모드로 개방한다.//
	fclose(ref_file_pointer);

	if((ref_file_pointer = fopen(ref_table_file_name, "w")) == NULL)
	{
		fprintf(stderr, "file open error\n");
		exit(1);
	}

	fseek(ref_file_pointer, 0, SEEK_SET); //파일을 처음부터 쓰기 위해서 다시 파일포인터의 위치를 초기로 이동.//

	//현재 저장한 배열의 내용을 다시 파일에 쓴다. -> 갱신작업.//
	for(i=0; i<array_count; i++)
	{
		fprintf(ref_file_pointer, "%d %d %s\n", temp_key[i], temp_req_count[i], temp_domain[i]);
	}

	fclose(ref_file_pointer);

	//printf("Update reference count ...\n");
}
/////////////////////////////////////
void update_ref_table_sorting(char *ref_table_file_name)
{
	HeapType heap; //힙 정의.//
	Node node[BUFSIZ]; //노드배열 정의.//
	int i;

	init(&heap); //힙을 초기화. 힙 사이즈의 크기를 0으로 초기화.//

	file_data_get(&heap, ref_table_file_name); //파일을 개방하여 힙에 기본 데이터를 설정한다.//

	file_data_set(&heap, ref_table_file_name); //데이터를 정렬하여 파일에 적용.//
}
/////////////////////////////////////
void init(HeapType *heap)
{
	heap->heap_size = 0;
}
//////////////////////////////////////
void file_data_get(HeapType *heap, char *ref_file_name)
{
	Node node;
	FILE *ref_file_pointer = NULL;

	if((ref_file_pointer = fopen(ref_file_name, "r")) == NULL)
	{
		fprintf(stderr, "file open error\n");
		exit(1);
	}

	//파일에서 데이터를 가져와서 설정한다.//
	while(!feof(ref_file_pointer))
	{
		fscanf(ref_file_pointer, "%d %d %s\n", &node.key, &node.req_count, node.address);

		//힙에 노드를 삽입한다.//
		heap_insert(heap, node);

		node.key = 0;
		node.req_count = 0;
	}

	fclose(ref_file_pointer);
}
/////////////////////////////////////
void heap_insert(HeapType *heap, Node node)
{
	//이 부분은 자료구조의 힙 부분이므로 자세한 알고리즘은 자료구조 힙을 참조.//
	//기본적으로 힙은 삽입 시 최소힙, 최대힙을 설정한다. 이 프로그램은 제일 우선순위가 높은것 부터 정렬이 되야하기에 최대힙(루트노드가 가장 큰 원소)구조를 따른다.//
	int i;
	i=++(heap->heap_size); //우선적으로 힙 사이즈 하나 증가.//

	while((i!=1) && (node.req_count > heap->heap[i/2].req_count)) //부모도느(i/2)랑 비교 했을 시 더 큰경우 부모노드랑 자리를 변경.//
	{
		heap->heap[i] = heap->heap[i/2];
		i/=2;
	}

	heap->heap[i] = node; //최종적으로 대입할 자리를 검색 시 노드값을 넣어준다.//
}
/////////////////////////////////////
void file_data_set(HeapType *heap, char *ref_file_name)
{
	FILE *ref_file_pointer = NULL;

	Node node; //데이터르 저장할 노드타입 변수.//
	int i;
	int heap_size; //힙의 사이즈를 정의.//

	heap_size = heap->heap_size; //힙의 사이즈 만큼 제거연산이 이루어져야 하기에 사이즈 필요.//

	//printf("heap_size : %d\n", heap_size);
	//파일에 데이터를 갱신하는 것이기에 w권한 필요.//
	if((ref_file_pointer = fopen(ref_file_name, "w")) == NULL)
	{
		fprintf(stderr, "file open error\n");
		exit(1);
	}

	//힙의 사이즈 만큼 정렬 작업 진행.//
	for(i=0; i<heap_size; i++)
	{
		node = delete_heap(heap); //힙의 제거 연산을 통해 가장 큰 우선순위를 차례대로 획득(최대힙 구조)한다.//

		//printf("%d %d %s\n", node.key, node.req_count, node.address);

		fprintf(ref_file_pointer, "%d %d %s\n", node.key, node.req_count, node.address);
	}

	fclose(ref_file_pointer);
}
/////////////////////////////////////
Node delete_heap(HeapType *heap) //힙에 노드 제거연산(정렬작업 수행)//
{
	int parent, child;
	Node node, temp;

	node = heap->heap[1]; //반환할 노드를 저장.//
	temp = heap->heap[(heap->heap_size)--]; //맨 마지막 노드를 임시노드로 설정. 힙은 루트노트를 제거 후 마지막 원소를 루트로 올려서 부모/자식 비교를 통해
	//다시 자기의 위치를 잡아간다.->완전이진트리(균형을 유지)//

	parent = 1;
	child = 2;

	while(child <= heap->heap_size)
	{
		if((child < heap->heap_size) && (heap->heap[child].req_count) < heap->heap[child+1].req_count)
		{
			child++;
		}

		if(temp.req_count >= heap->heap[child].req_count) //비교할려는 원소가 더 큰 경우.최대힙을 유지하므로 그대로 유지.//
		{
			break;
		}

		heap->heap[parent] = heap->heap[child];
		parent = child;

		child *= 2; //다음 레벨의 자식노드랑 비교하기 위해서 child값을 이동.//
	}

	heap->heap[parent] = temp; //현재 찾은 위치에 저장.//

	return node;
}
/////////////////////////////////////
int search_ref_table(char *ref_table_file_name, int *ref_key, char *recv_buf)
{
	FILE *ref_table_file_pointer = NULL;

	int check_value = 0; //0이면 현재 파일에 없다는 가정. 1이면 참조테이블에 존재한다는 것.//
	char compare_address[255];
	int key_value, req_count;

	//이 함수는 참조테이블 파일에 현재 도메인, IP주소가 등록이 되어있는지 검사.//
	
	if((ref_table_file_pointer = fopen(ref_table_file_name, "r")) == NULL)
	{
		fprintf(stderr, "file open error\n");
		exit(1);
	}

	//첫번째를 위해서 fseek()로 임의로 파일포인터의 읽기위치를 0(처음)으로 이동.//
	fseek(ref_table_file_pointer, 0, SEEK_SET);

	///이렇게 초기화를 설정해놓고 하면 0부터 무조건 읽게 된다.//
	while(!feof(ref_table_file_pointer)) //파일의 내용을 전부 읽을때까지 반복.즉 EOF가 나올때까지 반복.//
	{
		fscanf(ref_table_file_pointer, "%d %d %s\n", &key_value, &req_count, compare_address); //파일에 내용을 하나씩 가져온다.//

		if(strcmp(compare_address, recv_buf) == 0) //현재 도메인,IP가 등록된 것이라면.//
		{
			check_value = 1; //존재하면 check value가 바뀌게 된다.//

			*ref_key = key_value;
		}
	}

	fclose(ref_table_file_pointer);

	return check_value;
}
/////////////////////////////////////
void domain_ref_table_file_save(char *domain_ref_table_file_name, char *send_buf, int key)
{
	FILE *domain_file_pointer = NULL;
	int get_str_size; //읽어올 사이즈를 저장하는 변수.//
	int i;

	if((domain_file_pointer = fopen(domain_ref_table_file_name, "a")) == NULL)
	{
		fprintf(stderr, "ERROR : file open error\n");
		exit(1);
	}

	get_str_size = strlen(send_buf); //각 도메인 정보의 사이즈를 구한다.//

	//배열을 설정하는 단계.//
	size_array[array_size_count++] = get_str_size; //구해진 사이즈를 배열에 저장한다.//

	//파일에 현재 내용을 데이터와 키값을 이용해서 저장하게 된다.//
	//fprintf(domain_file_pointer, "%d |\n", key);
	fprintf(domain_file_pointer, "%s", send_buf);

	fclose(domain_file_pointer);
}
/////////////////////////////////////
 void ref_table_file_save(char *ref_table_file_name, int key,int req_count, char *recv_buf)
{
	FILE *ref_table_file_pointer = NULL;

	if((ref_table_file_pointer = fopen(ref_table_file_name, "a")) == NULL)
	{
		fprintf(stderr, "ERROR : file open error\n");
		exit(1);
	}

	fprintf(ref_table_file_pointer, "%d %d %s\n", key, req_count, recv_buf); //참조테이블에 저장.//

	fclose(ref_table_file_pointer);
}
/////////////////////////////////////
int send_dns_data_to_dnsserver(int clnt_sock, char recv_buf[],char send_buf[])
{
	 memset(send_buf, 0, sizeof(char)*BUFSIZ);

	//이 부분에서는 네트워크 부분이 아닌 서비스 설정부분이므로 서비스에 맞는 알고리즘을 적용.//
	//dnsserver에서 넘기는 것은 현재 테이블에 도메인 정보가 없기에 dns Server로부터 질의를 해서 정보를 얻어온다.//
	//현재 IP주소도 입력되기에 IP주소인지 도메인 주소인지 파싱해야 한다. 어차피 보내지는 send_buf는 동일한 컬럼이므로
	//IP인지 도메인인지만 알아내서 각각 다른 함수만 사용하면 된다.//
	struct hostent *host;
	struct sockaddr_in addr; //주소를 저장하기 위한 구조체.//
	int i;
	char *address = NULL;

	int check_value; //ip인지 도메인인지 체크하는 변수.//
	int check_search_value; //도메인 탐색에 성공했는지 안했는지 체크하는 변수.//

	address = (char *)malloc(strlen(recv_buf)+1);
	strcpy(address, recv_buf); //원본데이터를 보존하기 위해서 복사.//

	//파싱.//
	check_value = parsing_ip_domain(address);

	if(check_value == 0) //입력된 값이 도메인 주소인 경우.//
	{
		host = gethostbyname(address); //클라이언트가 질의한 도메인을 기입한다.DNS서버로부터 정보를 가져온다.//
	}

	else if(check_value == 1) //입력된 값이 ip주소인 경우.//
	{
		strcat(address, "\n"); //인식을 하기 위해서는 마지막에 줄바꿈 필요.//

		//주소부분은 sockaddr_in에다가 할당을 해주어야 한다.//
		memset(&addr, 0, sizeof(addr));
		addr.sin_addr.s_addr = inet_addr(address);

		host = gethostbyaddr((char *)&addr.sin_addr, 4, AF_INET); //다음의 경우는 IP주소를 변경해준다.//
	}

	if(!host) //만약 검색이 실패했을 경우.//
	{
		fprintf(log_file, "gethost ... error\n");

		strcat(send_buf, "** ");
		strcat(send_buf, "server can't find : ");
		strcat(send_buf, address);
		strcat(send_buf, " NXDOMAIN");
		strcat(send_buf, "\n");

		check_search_value = 0; //0이면 찾지 못했다는 의미.//
	}

	else //검색에 성공했을 경우.성공했을 경우 각각의 참조파일에 저장되게 된다.//
	{
		//IP로 검색한 결과나 도메인으로 검색한 결과나 똑같은 필드값들이 나온다.//
		//semd_buf에 관련 dns정보들을 하나씩 저장한다.이 내용들이 도메인 참조테이블 파일에 기록되어진다.//
		strcat(send_buf, "Official name : ");
		strcat(send_buf, host->h_name);
		strcat(send_buf, "\n");

		for(i=0; host->h_aliases[i]; i++)
		{
			strcat(send_buf, "Aliases : ");

			strcat(send_buf, host->h_aliases[i]);
			strcat(send_buf, "\n");
		}

		strcat(send_buf, "Address type : ");
		strcat(send_buf, (host->h_addrtype == AF_INET) ? "AF_INET" : "AF_INET6"); //조건에 따라 IPV4인지 IPV6인지를 구분해서 넣는다.//
		strcat(send_buf, "\n");

		for(i=0; host->h_addr_list[i]; i++)
		{
			strcat(send_buf, "IP Addr : ");

			strcat(send_buf, inet_ntoa(*(struct in_addr *)host->h_addr_list[i]));
			strcat(send_buf, "\n");
		}

		//이 부분에서 전송할 모든 데이터 정보가 저장완료된다.//

		check_search_value = 1; //1이면 존재한다는 의미.//
	}

	strcat(send_buf, "                               ");
	strcat(send_buf, "\n");

	return check_search_value;
}
/////////////////////////////////////////
void send_dns_data_to_table(int clnt_sock, char *domain_file, char *ref_file,int *ref_key, char recv_buf[], char send_buf[])
{
	memset(send_buf, 0, sizeof(char)*BUFSIZ); //정보를 설정하기전 배열의 정보를 초기화.//

	//현재 이 부분은 따로 DNS서버로 가서 정보를 가져올 필요가 없으니 이 함수내에서 전송버퍼를 채우기만 하면된다.//
	FILE *domain_file_pointer = NULL;

	char temp_buf; //한 문자를 담아서 저장할 변수.//
	int start_buffer_position = 0; //파일에서 데이터의 읽기시작위치를 지정.//
	int end_buffer_position = 0; //버퍼의 읽기를 종료할 지점.//
	int buffer_count = 0; //일반 버퍼의 위치 포인터.//
	int i;

	//이 부분은 도메인 참조테이블로 부터 정보를 가져와서 send_buf를 설정하는 알고리즘이다.//
	fprintf(log_file, "domain, ip address Already exist reference table ...\n");

	if((domain_file_pointer = fopen(domain_file, "r")) == NULL)
	{
		fprintf(stderr, "file open error\n");
		exit(1);
	}
	
	//시작위치의 값은 현재 조사된 키값에 따라서 결정된다.즉 3번까지 있으면 3번을 검색시 시작위치는 1,2번을 더한 위치부터 시작하게 된다..//
	for(i=0; i<*ref_key; i++) //키는 1번부터 시작되기에 -1.//
	{
		start_buffer_position+=size_array[i]; //계속 더해나간다. 해당 키값까지.//
	}

	//종료시점을 지정.더미 문자열이 존재하기에 그 부분으로 설정하기 위해서 임의로 4를 더함.//
	//종료시점의 지정은 현재 스타트 포인터 지점은 참조할려는 키값의 이전 데이터사이즈의 합이고 종료지점은 현재 키값의 
	//데이터 사이즈에서 더미 스트링까지를 포함한 데이터길이+4(넉넉하게)이다.//
	end_buffer_position = size_array[*ref_key];

	//파일포인터를 해당 위치에 이동. 이동하는 위치는 현재 탐색할려는 도메인이 저장되어있는 위치이다. SEEK_SET으로 처음위치부터 한번에 이동.//
	fseek(domain_file_pointer, start_buffer_position, SEEK_SET);

	//전송할 데이터를 작성한다.시작위치가 결정되었으니 현재 종료부분전까지 추출되는 데이터는 결국 전송할려는 데이터가 된다.//
	//fgetc()로 해야되는 이유는 fgets()로 하면 현재 이동포인터의 길이에 비례하지가 않는다.따라서 나중에 변환을 해서 저장해야되고
	//현재 구조에서는 fgetc()를 사용하는것이 타당하다.//
	while((temp_buf = fgetc(domain_file_pointer)) != EOF)
	{
		if(buffer_count >= end_buffer_position) //현재 탐색할려는 데이터의 내용을 다 저장한 경우.//
		{
			break; //데이터를 다 저장했으면 종료.//
		}

		send_buf[buffer_count] = temp_buf; //문자 하나하나를 문자배열에 저장.//

		buffer_count++; //다음 문자를 읽기 위해서 포인터 이동.//
	}

	strcat(send_buf, "\n"); //구분을 위해서 줄바꿈을 해준다.//
	
	send_buf[strlen(send_buf)+1] = '\0'; //마지막에 NULL을 넣는다.//

	//요기까지 전송버퍼 설정 완료.//

	fclose(domain_file_pointer); //작업이 끝났으므로 파일을 닫는다.//
}
